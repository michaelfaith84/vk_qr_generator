# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'vk_qr_generator.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import validators
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QVBoxLayout, QWidget

from qr_maker import MakeQrCode

class Ui_previewWindow(QWidget):
    def __init__(self):
        super().__init__()
        layout = QVBoxLayout()
        self.label = QtWidgets.QLabel()
        self.label.setGeometry(QtCore.QRect(-20, 0, 381, 351))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("gpg_vk.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        layout.addWidget(self.label)
        self.setLayout(layout)

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(300, 115)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        Dialog.setPalette(palette)
        Dialog.setAutoFillBackground(False)
        self.url = QtWidgets.QLineEdit(Dialog)
        self.url.setGeometry(QtCore.QRect(90, 14, 201, 31))
        self.url.setObjectName("url")
        self.url.textChanged.connect(self.onchange)
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(10, 48, 66, 61))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("../../vk.jpg"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.saveButton = QtWidgets.QPushButton(Dialog)
        self.saveButton.setGeometry(QtCore.QRect(200, 80, 89, 25))
        self.saveButton.setObjectName("saveButton")
        self.saveButton.clicked.connect(self.save_qr_code)
        self.saveButton.setDisabled(True)
        self.quitButton = QtWidgets.QPushButton(Dialog)
        self.quitButton.setGeometry(QtCore.QRect(90, 80, 89, 25))
        self.quitButton.setObjectName("quitButton")
        self.quitButton.clicked.connect(Dialog.close)
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(10, 20, 67, 17))
        self.label_2.setObjectName("label_2")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "VivoKey QR Code Generator"))
        self.saveButton.setText(_translate("Dialog", "Save"))
        self.quitButton.setText(_translate("Dialog", "Quit"))
        self.label_2.setText(_translate("Dialog", "GPG URL:"))

    def save_qr_code(self):
        if validators.url(self.url.text()):
            qr = MakeQrCode(self.url.text())
            res = qr.make()
            if res:
                preview = Ui_previewWindow()
                preview.show()

    def onchange(self):
        if validators.url(self.url.text()):
            self.saveButton.setEnabled(True)
        else:
            self.saveButton.setDisabled(True)